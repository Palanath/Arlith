package pala.apps.arlith.backend.common.protocol.events;

import java.time.Instant;

import pala.apps.arlith.backend.common.protocol.meta.CommunicationProtocolConstructionError;
import pala.apps.arlith.backend.common.protocol.types.TextValue;
import pala.apps.arlith.backend.common.protocol.types.TimestampValue;
import pala.apps.arlith.backend.connections.networking.Connection;
import pala.apps.arlith.backend.connections.networking.UnknownCommStateException;
import pala.libs.generic.events.Event;
import pala.libs.generic.events.EventType;
import pala.libs.generic.json.JSONObject;
import pala.libs.generic.json.JSONValue;

/**
 * <p>
 * The superclass for all Communication Protocol events. The events that
 * subclass this class are generated by the server, sent over an event
 * connection, and then received and processed by the client.
 * </p>
 * 
 * @author Palanath
 *
 */
public abstract class CommunicationProtocolEvent extends Event {

	private static final String EVENT_TYPE_KEY = "event", EVENT_TIMESTAMP_KEY = "timestamp";
	public static final EventType<CommunicationProtocolEvent> COMMUNICATION_PROTOCOL_EVENT = new EventType<>(EventType.EVENT);
	private final TextValue eventName;

	public CommunicationProtocolEvent(TextValue name, Instant timestamp) {
		super(timestamp);
		eventName = name;
	}

	public CommunicationProtocolEvent(String name, Instant timestamp) {
		this(new TextValue(name), timestamp);
	}

	public CommunicationProtocolEvent(TextValue name) {
		eventName = name;
	}

	public CommunicationProtocolEvent(String name) {
		this(new TextValue(name));
	}

	protected CommunicationProtocolEvent(String requiredName, JSONObject properties) {
		super(new TimestampValue(properties.get(EVENT_TIMESTAMP_KEY)).getValue());
		eventName = new TextValue(properties.get(EVENT_TYPE_KEY));
		if (!requiredName.equals(eventName.getValue()))
			throw new CommunicationProtocolConstructionError("JSON Object does not represent a " + requiredName
					+ " event. Its stored event name: " + eventName.getValue() + '.', properties);
	}

	protected abstract void build(JSONObject object);

	private JSONObject json() {
		JSONObject object = new JSONObject();
		object.put(EVENT_TYPE_KEY, eventName.json());
		object.put(EVENT_TIMESTAMP_KEY, new TimestampValue(getTimestamp()).json());
		build(object);
		return object;
	}

	public void send(Connection con) throws UnknownCommStateException {
		con.sendString(toJSON());
	}

	public final String toJSON() {
		return JSONValue.toStringShort(json());
	}

	@Override
	public String toString() {
		return "event(" + eventName.getValue() + ")";
	}

}
